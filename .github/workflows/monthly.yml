name: monthly run

on:
  schedule:
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 18:00 UTC on the 14-th of every month ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - cron: '0 18 14 * *'
  workflow_dispatch:      # lets me trigger it manually

permissions:
  contents: write

jobs:
  momentum:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pandas yfinance numpy

      - name: Run momentum screen
        run: python sector_momentum_screen.py

      - name: Generate HTML report
        run: |
          python -c "
          import pandas as pd
          from datetime import datetime
          
          # Read the CSV
          df = pd.read_csv('momentum_scores.csv')
          
          # Create HTML report
          html_content = f'''
          <!DOCTYPE html>
          <html>
          <head>
              <title>Sector Momentum Report - {datetime.now().strftime('%Y-%m-%d')}</title>
              <style>
                  body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }}
                  .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                  h1 {{ color: #333; text-align: center; }}
                  .summary {{ background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }}
                  table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
                  th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
                  th {{ background-color: #007bff; color: white; }}
                  tr:nth-child(even) {{ background-color: #f2f2f2; }}
                  .positive {{ color: green; font-weight: bold; }}
                  .negative {{ color: red; font-weight: bold; }}
                  .timestamp {{ text-align: center; color: #666; font-size: 0.9em; }}
              </style>
          </head>
          <body>
              <div class='container'>
                  <h1>üìà Sector Momentum Report</h1>
                  <div class='timestamp'>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}</div>
                  
                  <div class='summary'>
                      <h3>üìä Summary</h3>
                      <p><strong>Total ETFs analyzed:</strong> {len(df)}</p>
                      <p><strong>Top performers:</strong> {len(df[df['MomentumScore'] > 0])} ETFs with positive momentum</p>
                  </div>
                  
                  <h3>üèÜ Top 5 Momentum Winners</h3>
                  <table>
                      <tr><th>Rank</th><th>Ticker</th><th>Momentum Score</th><th>12-Month Return</th></tr>
          '''
          
          # Add top 5 winners
          top_5 = df.nlargest(5, 'MomentumScore')
          for i, (_, row) in enumerate(top_5.iterrows(), 1):
              mom_class = 'positive' if row['MomentumScore'] > 0 else 'negative'
              ret_class = 'positive' if row['Return12m'] > 0 else 'negative'
              html_content += f'''
                      <tr>
                          <td>{i}</td>
                          <td><strong>{row['Ticker']}</strong></td>
                          <td class='{mom_class}'>{row['MomentumScore']*100:.2f}%</td>
                          <td class='{ret_class}'>{row['Return12m']*100:.2f}%</td>
                      </tr>
          '''
          
          html_content += '''
                  </table>
                  
                  <h3>üìã Complete Results</h3>
                  <table>
                      <tr><th>Ticker</th><th>Momentum Score</th><th>12-Month Return</th></tr>
          '''
          
          # Add all results
          for _, row in df.iterrows():
              mom_class = 'positive' if row['MomentumScore'] > 0 else 'negative'
              ret_class = 'positive' if row['Return12m'] > 0 else 'negative'
              html_content += f'''
                      <tr>
                          <td><strong>{row['Ticker']}</strong></td>
                          <td class='{mom_class}'>{row['MomentumScore']*100:.2f}%</td>
                          <td class='{ret_class}'>{row['Return12m']*100:.2f}%</td>
                      </tr>
          '''
          
          html_content += '''
                  </table>
              </div>
          </body>
          </html>
          '''
          
          with open('momentum_report.html', 'w') as f:
              f.write(html_content)
          
          # Also create index.html for GitHub Pages
          with open('index.html', 'w') as f:
              f.write(html_content)
          "

      - name: Commit and push results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add momentum_scores.csv momentum_report.html index.html
          git commit -m "Update momentum results - $(date +'%Y-%m-%d')" || exit 0
          git push origin main

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: momentum_scores
          path: momentum_scores.csv

      - name: Generate email from template
        id: email_content
        run: |
          python3 -c "
          import pandas as pd
          from datetime import datetime, timedelta
          import re
          
          # Read the CSV data
          df = pd.read_csv('momentum_scores.csv')
          
          # Get bond data
          bond_ticker = 'AGG'
          bond_return = df[df['Ticker'] == bond_ticker]['Return12m'].iloc[0] * 100
          
          # Get top 3 winners (excluding bond)
          winners = df[df['Ticker'] != bond_ticker].nlargest(3, 'MomentumScore')
          
          # Read the template
          with open('email_template.txt', 'r') as f:
              template = f.read()
          
          # Calculate next rebalance date (14th of next month)
          today = datetime.now()
          if today.day >= 14:
              next_month = today.replace(day=1) + timedelta(days=32)
              next_month = next_month.replace(day=14)
          else:
              next_month = today.replace(day=14)
          
          # Replace placeholders
          replacements = {
              '{{ run_date }}': today.strftime('%Y-%m-%d'),
              '{{ run_time }}': today.strftime('%H:%M'),
              '{{ winner1_ticker }}': winners.iloc[0]['Ticker'] if len(winners) > 0 else 'N/A',
              '{{ winner1_label }}': 'Unknown',  # We'll need to add UNIVERSE mapping
              '{{ winner1_score }}': f'{winners.iloc[0]["MomentumScore"]*100:.1f}' if len(winners) > 0 else 'N/A',
              '{{ winner2_ticker }}': winners.iloc[1]['Ticker'] if len(winners) > 1 else 'N/A',
              '{{ winner2_label }}': 'Unknown',  # We'll need to add UNIVERSE mapping
              '{{ winner2_score }}': f'{winners.iloc[1]["MomentumScore"]*100:.1f}' if len(winners) > 1 else 'N/A',
              '{{ winner3_ticker }}': winners.iloc[2]['Ticker'] if len(winners) > 2 else 'N/A',
              '{{ winner3_label }}': 'Unknown',  # We'll need to add UNIVERSE mapping
              '{{ winner3_score }}': f'{winners.iloc[2]["MomentumScore"]*100:.1f}' if len(winners) > 2 else 'N/A',
              '{{ bond_ticker }}': bond_ticker,
              '{{ bond_return }}': f'{bond_return:.2f}',
              '{{ target_eur }}': '10,000',  # You can adjust this
              '{{ total_book }}': '30,000',  # You can adjust this
              '{{ next_rebalance_date }}': next_month.strftime('%Y-%m-%d')
          }
          
          # Apply replacements
          email_content = template
          for placeholder, value in replacements.items():
              email_content = email_content.replace(placeholder, str(value))
          
          # Extract subject and body
          lines = email_content.split('\n')
          subject = lines[0].replace('Subject: ', '')
          body = '\n'.join(lines[2:])  # Skip subject and empty line
          
          # Save to files for the workflow
          with open('email_subject.txt', 'w') as f:
              f.write(subject)
          with open('email_body.txt', 'w') as f:
              f.write(body)
          "

      - name: Set email subject and body
        id: set_email
        run: |
          echo "subject<<EOF" >> $GITHUB_OUTPUT
          cat email_subject.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat email_body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send email with report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.mail.me.com
          server_port: 587
          username: boris.stefanik@me.com
          password: ${{ secrets.Email }}
          subject: ${{ steps.set_email.outputs.subject }}
          to: boris.stefanik@me.com
          from: boris.stefanik@me.com
          content_type: text/plain
          secure: false
          body: ${{ steps.set_email.outputs.body }}
          attachments: momentum_scores.csv

      - name: Create notification issue
        run: |
          echo "## üìà Sector Momentum Report Updated" > notification.md
          echo "" >> notification.md
          echo "Your monthly sector momentum analysis has been completed!" >> notification.md
          echo "" >> notification.md
          echo "**üìä View the report online:** https://bstefco.github.io/momentumsector/" >> notification.md
          echo "" >> notification.md
          echo "**üìÖ Generated on:** $(date +'%Y-%m-%d %H:%M UTC')" >> notification.md
          echo "" >> notification.md
          echo "The report shows the top-performing sector ETFs based on momentum analysis." >> notification.md
          echo "" >> notification.md
          echo "---" >> notification.md
          echo "*This notification was automatically generated by the monthly momentum workflow.*" >> notification.md

      - name: Create GitHub issue notification
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const notification = fs.readFileSync('notification.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìà Momentum Report - ${new Date().toISOString().split('T')[0]}`,
              body: notification,
              labels: ['automated', 'momentum-report']
            }); 